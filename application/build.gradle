import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot'
    id 'nu.studer.jooq' version '6.0.1'
}

dependencies {
    implementation project(":lifebook-core")
    implementation project(":infrastructure:postgres-db")
    implementation project(":domain")

    implementation platform(SpringBootPlugin.BOM_COORDINATES)

    implementation 'javax.servlet:jstl'
    implementation 'javax.servlet:javax.servlet-api'
    implementation "org.springframework:spring-context-support"
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework:spring-jdbc"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'hibernate-validator'
    }
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'org.quartz-scheduler:quartz:2.2.1'
    implementation 'javax.mail:mail:1.4.7'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-dbcp2:2.1.1'
    implementation "org.flywaydb:flyway-core:${flyway_version}"
    implementation 'taglibs:standard:1.1.2'
    implementation 'commons-fileupload:commons-fileupload:1.3.1'
    implementation 'org.aspectj:aspectjweaver:1.9.7'
    implementation 'org.postgresql:postgresql:42.3.1'
    jooqGenerator 'org.postgresql:postgresql:42.3.1'
    implementation "org.jooq:jooq:${jooq_version}"
    implementation "org.jooq:jooq-codegen:${jooq_version}"
    implementation "org.jooq:jooq-meta:${jooq_version}"

    testImplementation libs.assertJ
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2:2.1.212'
    testImplementation "org.junit.jupiter:junit-jupiter:${junit5_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5_version}"
}

bootWar {
    mainClass.set('pp.ua.lifebook.LifebookApp')
}

jar {
    enabled = false
}

war {
    enabled = false
}

test {
    useJUnitPlatform()
}

ext['jooq.version'] = "${jooq_version}"

jooq {
    version = "${jooq_version}"

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = false

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/lifebook'
                    user = 'postgres'
                    password = '123'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                        excludes = '''
                            flyway_schema_history
                        '''
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        pojosEqualsAndHashCode = true
                    }
                    target {
                        packageName = 'pp.ua.lifebook.storage.db.scheme'
                        directory = 'generated-src/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}