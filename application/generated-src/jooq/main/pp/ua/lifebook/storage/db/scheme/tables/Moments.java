/*
 * This file is generated by jOOQ.
 */
package pp.ua.lifebook.storage.db.scheme.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pp.ua.lifebook.storage.db.scheme.Keys;
import pp.ua.lifebook.storage.db.scheme.Public;
import pp.ua.lifebook.storage.db.scheme.tables.records.MomentsRecord;

import java.time.LocalDate;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Moments extends TableImpl<MomentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.moments</code>
     */
    public static final Moments MOMENTS = new Moments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MomentsRecord> getRecordType() {
        return MomentsRecord.class;
    }

    /**
     * The column <code>public.moments.id</code>.
     */
    public final TableField<MomentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.moments.date</code>.
     */
    public final TableField<MomentsRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.moments.description</code>.
     */
    public final TableField<MomentsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(8000), this, "");

    /**
     * The column <code>public.moments.user_id</code>.
     */
    public final TableField<MomentsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Moments(Name alias, Table<MomentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Moments(Name alias, Table<MomentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.moments</code> table reference
     */
    public Moments(String alias) {
        this(DSL.name(alias), MOMENTS);
    }

    /**
     * Create an aliased <code>public.moments</code> table reference
     */
    public Moments(Name alias) {
        this(alias, MOMENTS);
    }

    /**
     * Create a <code>public.moments</code> table reference
     */
    public Moments() {
        this(DSL.name("moments"), null);
    }

    public <O extends Record> Moments(Table<O> child, ForeignKey<O, MomentsRecord> key) {
        super(child, key, MOMENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MomentsRecord, Integer> getIdentity() {
        return (Identity<MomentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MomentsRecord> getPrimaryKey() {
        return Keys.MOMENTS_PK;
    }

    @Override
    public Moments as(String alias) {
        return new Moments(DSL.name(alias), this);
    }

    @Override
    public Moments as(Name alias) {
        return new Moments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Moments rename(String name) {
        return new Moments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Moments rename(Name name) {
        return new Moments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDate, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
