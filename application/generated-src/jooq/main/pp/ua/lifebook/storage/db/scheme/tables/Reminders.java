/*
 * This file is generated by jOOQ.
 */
package pp.ua.lifebook.storage.db.scheme.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pp.ua.lifebook.storage.db.scheme.Keys;
import pp.ua.lifebook.storage.db.scheme.Public;
import pp.ua.lifebook.storage.db.scheme.tables.records.RemindersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reminders extends TableImpl<RemindersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reminders</code>
     */
    public static final Reminders REMINDERS = new Reminders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RemindersRecord> getRecordType() {
        return RemindersRecord.class;
    }

    /**
     * The column <code>public.reminders.id</code>.
     */
    public final TableField<RemindersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.reminders.plan_id</code>.
     */
    public final TableField<RemindersRecord, Integer> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.reminders.remind_at</code>.
     */
    public final TableField<RemindersRecord, LocalDateTime> REMIND_AT = createField(DSL.name("remind_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Reminders(Name alias, Table<RemindersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reminders(Name alias, Table<RemindersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.reminders</code> table reference
     */
    public Reminders(String alias) {
        this(DSL.name(alias), REMINDERS);
    }

    /**
     * Create an aliased <code>public.reminders</code> table reference
     */
    public Reminders(Name alias) {
        this(alias, REMINDERS);
    }

    /**
     * Create a <code>public.reminders</code> table reference
     */
    public Reminders() {
        this(DSL.name("reminders"), null);
    }

    public <O extends Record> Reminders(Table<O> child, ForeignKey<O, RemindersRecord> key) {
        super(child, key, REMINDERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RemindersRecord, Integer> getIdentity() {
        return (Identity<RemindersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RemindersRecord> getPrimaryKey() {
        return Keys.REMINDER_PK;
    }

    @Override
    public List<ForeignKey<RemindersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REMINDERS__REMINDER_PLAN_FK);
    }

    private transient Plans _plans;

    public Plans plans() {
        if (_plans == null)
            _plans = new Plans(this, Keys.REMINDERS__REMINDER_PLAN_FK);

        return _plans;
    }

    @Override
    public Reminders as(String alias) {
        return new Reminders(DSL.name(alias), this);
    }

    @Override
    public Reminders as(Name alias) {
        return new Reminders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reminders rename(String name) {
        return new Reminders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reminders rename(Name name) {
        return new Reminders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
