/*
 * This file is generated by jOOQ.
 */
package pp.ua.lifebook.storage.db.scheme.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pp.ua.lifebook.storage.db.scheme.Keys;
import pp.ua.lifebook.storage.db.scheme.Public;
import pp.ua.lifebook.storage.db.scheme.tables.records.UserSettingsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSettings extends TableImpl<UserSettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_settings</code>
     */
    public static final UserSettings USER_SETTINGS = new UserSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSettingsRecord> getRecordType() {
        return UserSettingsRecord.class;
    }

    /**
     * The column <code>public.user_settings.view_options</code>.
     */
    public final TableField<UserSettingsRecord, String> VIEW_OPTIONS = createField(DSL.name("view_options"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.user_settings.user_id</code>.
     */
    public final TableField<UserSettingsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_settings.default_tab</code>.
     */
    public final TableField<UserSettingsRecord, String> DEFAULT_TAB = createField(DSL.name("default_tab"), SQLDataType.VARCHAR(25).nullable(false).defaultValue(DSL.field("'DAILY'::character varying", SQLDataType.VARCHAR)), this, "");

    private UserSettings(Name alias, Table<UserSettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSettings(Name alias, Table<UserSettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_settings</code> table reference
     */
    public UserSettings(String alias) {
        this(DSL.name(alias), USER_SETTINGS);
    }

    /**
     * Create an aliased <code>public.user_settings</code> table reference
     */
    public UserSettings(Name alias) {
        this(alias, USER_SETTINGS);
    }

    /**
     * Create a <code>public.user_settings</code> table reference
     */
    public UserSettings() {
        this(DSL.name("user_settings"), null);
    }

    public <O extends Record> UserSettings(Table<O> child, ForeignKey<O, UserSettingsRecord> key) {
        super(child, key, USER_SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserSettingsRecord> getPrimaryKey() {
        return Keys.PK_USER_SETTINGS;
    }

    @Override
    public UserSettings as(String alias) {
        return new UserSettings(DSL.name(alias), this);
    }

    @Override
    public UserSettings as(Name alias) {
        return new UserSettings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSettings rename(String name) {
        return new UserSettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSettings rename(Name name) {
        return new UserSettings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
