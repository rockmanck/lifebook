/*
 * This file is generated by jOOQ.
 */
package pp.ua.lifebook.storage.db.scheme.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import pp.ua.lifebook.storage.db.scheme.tables.Reminders;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RemindersRecord extends UpdatableRecordImpl<RemindersRecord> implements Record3<Integer, Integer, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.reminders.id</code>.
     */
    public RemindersRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.reminders.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.reminders.plan_id</code>.
     */
    public RemindersRecord setPlanId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.reminders.plan_id</code>.
     */
    public Integer getPlanId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.reminders.remind_at</code>.
     */
    public RemindersRecord setRemindAt(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.reminders.remind_at</code>.
     */
    public LocalDateTime getRemindAt() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Reminders.REMINDERS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Reminders.REMINDERS.PLAN_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Reminders.REMINDERS.REMIND_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getPlanId();
    }

    @Override
    public LocalDateTime component3() {
        return getRemindAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getPlanId();
    }

    @Override
    public LocalDateTime value3() {
        return getRemindAt();
    }

    @Override
    public RemindersRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public RemindersRecord value2(Integer value) {
        setPlanId(value);
        return this;
    }

    @Override
    public RemindersRecord value3(LocalDateTime value) {
        setRemindAt(value);
        return this;
    }

    @Override
    public RemindersRecord values(Integer value1, Integer value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RemindersRecord
     */
    public RemindersRecord() {
        super(Reminders.REMINDERS);
    }

    /**
     * Create a detached, initialised RemindersRecord
     */
    public RemindersRecord(Integer id, Integer planId, LocalDateTime remindAt) {
        super(Reminders.REMINDERS);

        setId(id);
        setPlanId(planId);
        setRemindAt(remindAt);
    }

    /**
     * Create a detached, initialised RemindersRecord
     */
    public RemindersRecord(pp.ua.lifebook.storage.db.scheme.tables.pojos.Reminders value) {
        super(Reminders.REMINDERS);

        if (value != null) {
            setId(value.getId());
            setPlanId(value.getPlanId());
            setRemindAt(value.getRemindAt());
        }
    }
}
