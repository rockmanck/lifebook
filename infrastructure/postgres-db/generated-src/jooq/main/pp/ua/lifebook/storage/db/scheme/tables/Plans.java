/*
 * This file is generated by jOOQ.
 */
package pp.ua.lifebook.storage.db.scheme.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pp.ua.lifebook.storage.db.scheme.Indexes;
import pp.ua.lifebook.storage.db.scheme.Keys;
import pp.ua.lifebook.storage.db.scheme.Public;
import pp.ua.lifebook.storage.db.scheme.tables.records.PlansRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Plans extends TableImpl<PlansRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.plans</code>
     */
    public static final Plans PLANS = new Plans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlansRecord> getRecordType() {
        return PlansRecord.class;
    }

    /**
     * The column <code>public.plans.id</code>.
     */
    public final TableField<PlansRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.plans.title</code>.
     */
    public final TableField<PlansRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.plans.repeated</code>. code of RepeatType
     */
    public final TableField<PlansRecord, String> REPEATED = createField(DSL.name("repeated"), SQLDataType.VARCHAR(10), this, "code of RepeatType");

    /**
     * The column <code>public.plans.comments</code>.
     */
    public final TableField<PlansRecord, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>public.plans.status</code>.
     */
    public final TableField<PlansRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.plans.user_id</code>.
     */
    public final TableField<PlansRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.plans.category</code>.
     */
    public final TableField<PlansRecord, Integer> CATEGORY = createField(DSL.name("category"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.plans.due_time</code>.
     */
    public final TableField<PlansRecord, LocalDateTime> DUE_TIME = createField(DSL.name("due_time"), SQLDataType.LOCALDATETIME(6), this, "");

    private Plans(Name alias, Table<PlansRecord> aliased) {
        this(alias, aliased, null);
    }

    private Plans(Name alias, Table<PlansRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.plans</code> table reference
     */
    public Plans(String alias) {
        this(DSL.name(alias), PLANS);
    }

    /**
     * Create an aliased <code>public.plans</code> table reference
     */
    public Plans(Name alias) {
        this(alias, PLANS);
    }

    /**
     * Create a <code>public.plans</code> table reference
     */
    public Plans() {
        this(DSL.name("plans"), null);
    }

    public <O extends Record> Plans(Table<O> child, ForeignKey<O, PlansRecord> key) {
        super(child, key, PLANS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FKI_PLAN_STATUS_FK, Indexes.FKI_USER_FK);
    }

    @Override
    public Identity<PlansRecord, Integer> getIdentity() {
        return (Identity<PlansRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlansRecord> getPrimaryKey() {
        return Keys.PLANS_PK;
    }

    @Override
    public List<ForeignKey<PlansRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLANS__USER_FK, Keys.PLANS__CATEGORY_FK);
    }

    private transient Users _users;
    private transient Category _category;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.PLANS__USER_FK);

        return _users;
    }

    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.PLANS__CATEGORY_FK);

        return _category;
    }

    @Override
    public Plans as(String alias) {
        return new Plans(DSL.name(alias), this);
    }

    @Override
    public Plans as(Name alias) {
        return new Plans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Plans rename(String name) {
        return new Plans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Plans rename(Name name) {
        return new Plans(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
