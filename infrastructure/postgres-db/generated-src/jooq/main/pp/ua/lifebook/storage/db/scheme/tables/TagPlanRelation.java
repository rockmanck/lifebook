/*
 * This file is generated by jOOQ.
 */
package pp.ua.lifebook.storage.db.scheme.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pp.ua.lifebook.storage.db.scheme.Public;
import pp.ua.lifebook.storage.db.scheme.tables.records.TagPlanRelationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagPlanRelation extends TableImpl<TagPlanRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tag_plan_relation</code>
     */
    public static final TagPlanRelation TAG_PLAN_RELATION = new TagPlanRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagPlanRelationRecord> getRecordType() {
        return TagPlanRelationRecord.class;
    }

    /**
     * The column <code>public.tag_plan_relation.tag_id</code>.
     */
    public final TableField<TagPlanRelationRecord, Integer> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tag_plan_relation.plan_id</code>.
     */
    public final TableField<TagPlanRelationRecord, Integer> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.INTEGER, this, "");

    private TagPlanRelation(Name alias, Table<TagPlanRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private TagPlanRelation(Name alias, Table<TagPlanRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tag_plan_relation</code> table reference
     */
    public TagPlanRelation(String alias) {
        this(DSL.name(alias), TAG_PLAN_RELATION);
    }

    /**
     * Create an aliased <code>public.tag_plan_relation</code> table reference
     */
    public TagPlanRelation(Name alias) {
        this(alias, TAG_PLAN_RELATION);
    }

    /**
     * Create a <code>public.tag_plan_relation</code> table reference
     */
    public TagPlanRelation() {
        this(DSL.name("tag_plan_relation"), null);
    }

    public <O extends Record> TagPlanRelation(Table<O> child, ForeignKey<O, TagPlanRelationRecord> key) {
        super(child, key, TAG_PLAN_RELATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public TagPlanRelation as(String alias) {
        return new TagPlanRelation(DSL.name(alias), this);
    }

    @Override
    public TagPlanRelation as(Name alias) {
        return new TagPlanRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagPlanRelation rename(String name) {
        return new TagPlanRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagPlanRelation rename(Name name) {
        return new TagPlanRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
