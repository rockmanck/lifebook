/*
 * This file is generated by jOOQ.
 */
package pp.ua.lifebook.storage.db.scheme.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import pp.ua.lifebook.storage.db.scheme.tables.Moments;

import java.time.LocalDate;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MomentsRecord extends UpdatableRecordImpl<MomentsRecord> implements Record4<Integer, LocalDate, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.moments.id</code>.
     */
    public MomentsRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.moments.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.moments.date</code>.
     */
    public MomentsRecord setDate(LocalDate value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.moments.date</code>.
     */
    public LocalDate getDate() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for <code>public.moments.description</code>.
     */
    public MomentsRecord setDescription(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.moments.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.moments.user_id</code>.
     */
    public MomentsRecord setUserId(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.moments.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDate, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, LocalDate, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Moments.MOMENTS.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return Moments.MOMENTS.DATE;
    }

    @Override
    public Field<String> field3() {
        return Moments.MOMENTS.DESCRIPTION;
    }

    @Override
    public Field<Integer> field4() {
        return Moments.MOMENTS.USER_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getDate();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Integer component4() {
        return getUserId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getDate();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public Integer value4() {
        return getUserId();
    }

    @Override
    public MomentsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public MomentsRecord value2(LocalDate value) {
        setDate(value);
        return this;
    }

    @Override
    public MomentsRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public MomentsRecord value4(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public MomentsRecord values(Integer value1, LocalDate value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MomentsRecord
     */
    public MomentsRecord() {
        super(Moments.MOMENTS);
    }

    /**
     * Create a detached, initialised MomentsRecord
     */
    public MomentsRecord(Integer id, LocalDate date, String description, Integer userId) {
        super(Moments.MOMENTS);

        setId(id);
        setDate(date);
        setDescription(description);
        setUserId(userId);
    }

    /**
     * Create a detached, initialised MomentsRecord
     */
    public MomentsRecord(pp.ua.lifebook.storage.db.scheme.tables.pojos.Moments value) {
        super(Moments.MOMENTS);

        if (value != null) {
            setId(value.getId());
            setDate(value.getDate());
            setDescription(value.getDescription());
            setUserId(value.getUserId());
        }
    }
}
