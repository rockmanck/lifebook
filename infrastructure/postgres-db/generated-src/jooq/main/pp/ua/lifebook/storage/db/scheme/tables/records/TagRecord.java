/*
 * This file is generated by jOOQ.
 */
package pp.ua.lifebook.storage.db.scheme.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import pp.ua.lifebook.storage.db.scheme.tables.Tag;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagRecord extends UpdatableRecordImpl<TagRecord> implements Record3<Integer, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.tag.id</code>.
     */
    public TagRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.tag.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.tag.user_id</code>.
     */
    public TagRecord setUserId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.tag.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.tag.name</code>.
     */
    public TagRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.tag.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Tag.TAG.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Tag.TAG.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return Tag.TAG.NAME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public TagRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TagRecord value2(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public TagRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public TagRecord values(Integer value1, Integer value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TagRecord
     */
    public TagRecord() {
        super(Tag.TAG);
    }

    /**
     * Create a detached, initialised TagRecord
     */
    public TagRecord(Integer id, Integer userId, String name) {
        super(Tag.TAG);

        setId(id);
        setUserId(userId);
        setName(name);
    }

    /**
     * Create a detached, initialised TagRecord
     */
    public TagRecord(pp.ua.lifebook.storage.db.scheme.tables.pojos.Tag value) {
        super(Tag.TAG);

        if (value != null) {
            setId(value.getId());
            setUserId(value.getUserId());
            setName(value.getName());
        }
    }
}
